import kwantfrom matplotlib import pyplotimport numpy as npimport tinyarraysigma_1 = tinyarray.array([[1,1j,0,0], [1j,-1,0,0],[0,0,1,-1j],[0,0,-1j,-1]])sigma_2 = tinyarray.array([[1,-1,0,0], [1,-1,0,0],[0,0,1,-1],[0,0,1,-1]])sigma_0 =tinyarray.array([[1,0,0,0], [0,-1,0,0],[0,0,1,0],[0,0,0,-1]])def make_lead(a=1, t=1.0,  W=30):    # Start with an empty lead with a single square lattice    lat = kwant.lattice.square(a)    sym_lead = kwant.TranslationalSymmetry((-a, 0))    lead = kwant.Builder(sym_lead)        for j in xrange(W):        lead[lat(0, j)] = (3.5 * t ) * sigma_0         if j > 0:            lead[lat(0, j), lat(0, j - 1)] = -t * sigma_2                    lead[lat(1, j), lat(0, j)] = -t * sigma_1    return leaddef main():    # Make system and finalize it right away.    lead = make_lead().finalized()    kwant.plotter.bands(lead, momenta=np.linspace(-3, 3, 101), show=False)    pyplot.xlabel("momentum [(lattice constant)^-1]")    pyplot.ylabel("energy [t]")    pyplot.ylim([-5, 5])    pyplot.show()# Call the main function if the script gets executed (as opposed to imported).# See <http://docs.python.org/library/__main__.html>.if __name__ == '__main__':    main()
